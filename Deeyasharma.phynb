{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOnfilVW+U4+JJdKtgaSBLL"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import sklearn\n","from sklearn.datasets import load_boston\n","df = load_boston()\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning\n"," The Boston housing prices dataset has an ethical problem. You can refer to\n"," the documentation of this function for further details.\n"," The scikit-learn maintainers therefore strongly discourage the use of this\n"," dataset unless the purpose of the code is to study and educate about\n"," ethical issues in data science and machine learning.\n"," In this special case, you can fetch the dataset from the original\n"," source::\n"," import pandas as pd\n"," import numpy as np\n"," data_url = \"http://lib.stat.cmu.edu/datasets/boston\"\n"," raw_df = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\n"," data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])\n"," target = raw_df.values[1::2, 2]\n"," Alternative datasets include the California housing dataset (i.e.\n"," :func:`~sklearn.datasets.fetch_california_housing`) and the Ames housing\n"," dataset. You can load the datasets as follows::\n"," from sklearn.datasets import fetch_california_housing\n"," housing = fetch_california_housing()\n"," for the California housing dataset and::\n"," from sklearn.datasets import fetch_openml\n"," housing = fetch_openml(name=\"house_prices\", as_frame=True)\n"," for the Ames housing dataset.\n"," \n"," warnings.warn(msg, category=FutureWarning)\n","df.keys() #return all the keys of the dataset dictionary\n","dict_keys(['data', 'target', 'feature_names', 'DESCR', 'filename', 'data_module'])\n","boston = pd.DataFrame(df.data, columns=df.feature_names)\n","boston.head()\n","CRIM ZN INDUS CHAS NOX RM AGE DIS RAD TAX PTRATIO B L\n","0 0.00632 18.0 2.31 0.0 0.538 6.575 65.2 4.0900 1.0 296.0 15.3 396.90\n","1 0.02731 0.0 7.07 0.0 0.469 6.421 78.9 4.9671 2.0 242.0 17.8 396.90\n","2 0.02729 0.0 7.07 0.0 0.469 7.185 61.1 4.9671 2.0 242.0 17.8 392.83\n","3 0.03237 0.0 2.18 0.0 0.458 6.998 45.8 6.0622 3.0 222.0 18.7 394.63\n","boston['MEDV'] = df.target\n","boston.head()\n","CRIM ZN INDUS CHAS NOX RM AGE DIS RAD TAX PTRATIO B L\n","0 0.00632 18.0 2.31 0.0 0.538 6.575 65.2 4.0900 1.0 296.0 15.3 396.90\n","1 0.02731 0.0 7.07 0.0 0.469 6.421 78.9 4.9671 2.0 242.0 17.8 396.90\n","2 0.02729 0.0 7.07 0.0 0.469 7.185 61.1 4.9671 2.0 242.0 17.8 392.83\n","3 0.03237 0.0 2.18 0.0 0.458 6.998 45.8 6.0622 3.0 222.0 18.7 394.63\n","4 0.06905 0.0 2.18 0.0 0.458 7.147 54.2 6.0622 3.0 222.0 18.7 396.90\n","boston.isnull()\n","CRIM ZN INDUS CHAS NOX RM AGE DIS RAD TAX PTRATIO B\n","0 False False False False False False False False False False False False\n","1 False False False False False False False False False False False False\n","2 False False False False False False False False False False False False\n","3 False False False False False False False False False False False False\n","4 False False False False False False False False False False False False\n","... ... ... ... ... ... ... ... ... ... ... ... ...\n","501 False False False False False False False False False False False False\n","502 False False False False False False False False False False False False\n","503 False False False False False False False False False False False False\n","504 False False False False False False False False False False False False\n","505 False False False False False False False False False False False False\n","boston.isnull().sum()\n","CRIM 0\n","ZN 0\n","INDUS 0\n","CHAS 0\n","NOX 0\n","RM 0\n","AGE 0\n","DIS 0\n","RAD 0\n","TAX 0\n","PTRATIO 0\n","B 0\n","LSTAT 0\n","MEDV 0\n","dtype: int64\n","from sklearn.model_selection import train_test_split\n","X = boston.drop('MEDV', axis=1)\n","Y = boston['MEDV']\n","X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.15, random_state=5\n","\n","print(X_train.shape)\n","print(X_test.shape)\n","print(Y_train.shape)\n","print(Y_test.shape)\n","(430, 13)\n","(76, 13)\n","(430,)\n","(76,)\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error\n","lin_model = LinearRegression()\n","lin_model.fit(X_train, Y_train)\n","LinearRegression()\n","y_train_predict = lin_model.predict(X_train)\n","rmse = (np.sqrt(mean_squared_error(Y_train,y_train_predict)))\n","print(\"The model performance of training set\")\n","print('RMSE is {}'.format(rmse))\n","print(\"\\n\")\n","y_test_predict = lin_model.predict(X_test)\n","rmse = (np.sqrt(mean_squared_error(Y_test,y_test_predict)))\n","print(\"The model performance for testing set\")\n","print('RMSE is {}'.format(rmse))\n","The model performance of training set\n","RMSE is 4.710901797319796\n","The model performance for testing set\n","RMSE is 4.687543527902972"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":220},"id":"srwHWMPx1Gkr","executionInfo":{"status":"error","timestamp":1664769462274,"user_tz":-330,"elapsed":1845,"user":{"displayName":"Deeya Sharma","userId":"17330049985745508288"}},"outputId":"28461f12-ebfb-4e16-a409-355258ede2f9"},"execution_count":1,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-acf7ba32ca90>\"\u001b[0;36m, line \u001b[0;32m6\u001b[0m\n\u001b[0;31m    usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87:(FutureWarning)\u001b[0m\n\u001b[0m                          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]}]}